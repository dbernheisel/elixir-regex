<div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
  <div class="flex flex-wrap items-center justify-between -mt-2 -ml-4 sm:flex-no-wrap">
    <div class="mt-2 ml-4">
      <h1 class="text-2xl font-semibold text-gray-900">Regex Tester</h1>
    </div>
    <div class="flex-shrink-0 mt-2 ml-4">
      <span class="inline-flex rounded-md shadow-sm">
        <% is_disabled = @record.id && !changed?(@changeset) %>
        <button phx-click="permalink" <%= if is_disabled, do: "disabled=true" %> type="button" class="relative inline-flex items-center <%= if is_disabled, do: "opacity-50 cursor-not-allowed" %> px-4 py-2 font-medium text-white bg-indigo-600 border border-transparent leading-5 rounded-md hover:bg-indigo-500 focus:outline-none focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700">

          <svg viewBox="0 0 24 24" class="w-4 h-5 mr-2 fill-current">
            <path d="M19.48 13.03A4 4 0 0 1 16 19h-4a4 4 0 1 1 0-8h1a1 1 0 0 0 0-2h-1a6 6 0 1 0 0 12h4a6 6 0 0 0 5.21-8.98L21.2 12a1 1 0 1 0-1.72 1.03zM4.52 10.97A4 4 0 0 1 8 5h4a4 4 0 1 1 0 8h-1a1 1 0 0 0 0 2h1a6 6 0 1 0 0-12H8a6 6 0 0 0-5.21 8.98l.01.02a1 1 0 1 0 1.72-1.03z"/>
          </svg>
          <%= if @record.id && !changed?(@changeset), do: "Saved", else: "Permalink" %>
        </button>
      </span>
    </div>
  </div>
</div>

<div class="px-4 mx-auto max-w-7xl sm:px-6 md:px-8">
  <%= f = form_for @changeset, "#", [phx_change: :validate] %>
    <div class="mt-6 grid grid-cols-1 row-gap-6 col-gap-4 sm:grid-cols-6">
      <div class="sm:col-span-5">
        <%= label f, :regex, class: "block text-sm font-medium leading-5 text-gray-700" %>
        <div class="relative mt-1 rounded-md shadow-sm">
          <div class="absolute inset-y-0 left-0 flex items-center pl-4 pr-4 font-normal leading-normal text-gray-500 pointer-events-none">
            ~r/
          </div>
          <%= text_input f, :regex,
                placeholder: "regex",
                autocomplete: "off",
                class: "form-input pl-10 font-mono block w-full sm:text-sm sm:leading-5" %>
          <div class="absolute inset-y-0 flex items-center pl-3 font-normal leading-normal text-gray-500 pointer-events-none right-4">/</div>
        </div>
        <%= error_tag f, :regex %>
        <p class="p-1 font-mono text-xs text-gray-700">
          For example:
        <%= case @function do %>
          <% "named_captures" -> %>
            <code class="select-all">\A(?&lt;sign&gt;-)?(?&lt;seconds&gt;\d{10,11})(?:\.(?&lt;subseconds&gt;\d{1,10}))?\z</code>
          <% _ -> %>
            <code class="select-all">\A[a-z0-9-]+\z</code>
        <% end %>
        </p>
      </div>

      <div class="sm:col-span-1">
        <%= label f, :flags, class: "block text-sm font-medium leading-5 text-gray-700" %>
        <div class="relative mt-1 rounded-md shadow-sm">
          <%= text_input f, :flags,
                placeholder: "flags",
                phx_hook: "MaskFlags",
                autocomplete: "off",
                class: "form-input font-mono block w-full sm:text-sm sm:leading-5" %>
        </div>
        <%= error_tag f, :flags %>
        <p class="p-1 font-mono text-xs text-gray-700">
          U f i m s u x
        </p>

      </div>

      <div class="sm:col-span-5">
        <%= label f, :string, class: "block text-sm font-medium leading-5 text-gray-700" %>
        <div class="mt-1 rounded-md shadow-sm">
          <%= textarea f, :string, spellcheck: "false", rows: 6, class: "form-textarea font-mono block w-full transition duration-150 ease-in-out sm:text-sm sm:leading-5" %>
        </div>
        <%= error_tag f, :string %>

        <fieldset class="mt-6">
          <legend class="text-sm font-medium text-gray-700 leading-5">
            Function
            <button type="button" class="inline-block px-1 bg-gray-300 rounded" id="clipboard-pasta" phx-hook="ClipboardCopy" data-target="regex-pasta">Copy</button>
          </legend>
          <div class="w-full p-2 my-2 font-mono bg-gray-200 rounded">
            <input type="text" readonly id="regex-pasta" class="w-full bg-gray-200 cursor-default" value="<%= @pasta %>" />
          </div>
          <p class="text-sm text-gray-500 leading-5">Which <a href="https://hexdocs.pm/elixir/Regex.html" target="_BLANK">Regex function</a> to run</p>
          <div class="flex flex-wrap mt-1 space-x-8">
            <div class="flex items-center">
              <%= radio_button f, :function, "run", class: "form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" %>
              <label for="regex_live_function_run" class="ml-2">
                <span class="text-sm font-medium text-gray-700 leading-5">Run</span>
              </label>
            </div>
            <div class="flex items-center">
              <%= radio_button f, :function, "named_captures", class: "form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" %>
              <label for="regex_live_function_named_captures" class="ml-2">
                <span class="text-sm font-medium text-gray-700 leading-5">Named Captures</span>
              </label>
            </div>
            <div class="flex items-center">
              <%= radio_button f, :function, "scan", class: "form-radio h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" %>
              <label for="regex_live_function_scan" class="ml-2">
                <span class="text-sm font-medium text-gray-700 leading-5">Scan</span>
              </label>
            </div>
          </div>
        </fieldset>
      </div>

      <div class="sm:col-span-1">
        <ul class="text-sm space-y-1">
          <li class="tooltip <%= if @tooltip[:unicode], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="u" type="button">
              unicode (<code>u</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:unicode] == true, do: "hidden" %>">
              enables Unicode specific patterns like <code>\p</code> and change modifiers like <code>\w</code>, <code>\W</code>, <code>\s</code> and friends to also match on Unicode. It expects valid Unicode strings to be given on match</p>
          </li>

          <li class="tooltip <%= if @tooltip[:caseless], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="i" type="button">
              caseless (<code>i</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:caseless], do: "hidden" %>">
              adds case insensitivity
            </p>
          </li>

          <li class="tooltip <%= if @tooltip[:dotall], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="s" type="button">
              dotall (<code>s</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:dotall], do: "hidden" %>">
              causes dot to match newlines and also set newline to anycrlf; the new line setting can be overridden by setting (*CR) or (*LF) or (*CRLF) or (*ANY) according to <a href="https://erlang.org/doc/man/re.html" target="_BLANK"><code>:re</code></a> documentation
            </p>
          </li>

          <li class="tooltip <%= if @tooltip[:multiline], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="m" type="button">
              multiline (<code>m</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:multiline], do: "hidden" %>">
              causes <code>^</code> and <code>$</code> to mark the beginning and end of each line; use <code>\A</code> and <code>\z</code> to match the end or beginning of the string
            </p>
          </li>

          <li class="tooltip <%= if @tooltip[:extended], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="x" type="button">
              extended (<code>x</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:extended], do: "hidden" %>">
              whitespace characters are ignored except when escaped and allow <code>#</code> to delimit comments
            </p>
          </li>

          <li class="tooltip <%= if @tooltip[:firstline], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="f" type="button">
              firstline (<code>f</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:firstline], do: "hidden" %>">
              forces the unanchored pattern to match before or at the first newline, though the matched text may continue over the newline
            </p>
          </li>

          <li class="tooltip <%= if @tooltip[:ungreedy], do: "active" %>">
            <button title="show info" class="tooltip-btn" phx-click="toggle-tooltip" phx-value-tooltip="U" type="button">
              ungreedy (<code>U</code>)
            </button>
            <p class="tooltip-desc <%= unless @tooltip[:ungreedy], do: "hidden" %>">
              inverts the "greediness" of the regexp (the previous <code>r</code> option is deprecated in favor of <code>U</code>)
            </p>
          </li>
        </ul>
      </div>
    </div>

    <p class="block mt-5 text-sm font-medium text-gray-700 leading-5">Result</p>
    <div class="w-full p-2 my-2 font-mono bg-gray-200 rounded">
      <pre class="overflow-x-scroll matches"><%
      %><%# The weird newline joins are intentional to prevent HTML newlines. %><%
      %><%# These spans need to be side-by-side. %><%
        %><%= for {type, string} <- @matched do %><%
 %><span class="<%= if type == :matched, do: "m", else: "u" %>"><%= string %></span><%
        %><% end %><%
      %></pre>
      <pre class="select-all">#=> <%= inspect(@result, limit: :infinity, pretty: true) %></pre>
    </div>

  </form>

  <div>
    <%= render("_cheatsheet.html") %>
  </div>

</div>
